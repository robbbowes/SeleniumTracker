// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeleniumTracker.Data;

#nullable disable

namespace SeleniumTracker.Migrations
{
    [DbContext(typeof(SeleniumTrackerDbContext))]
    [Migration("20220608171906_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SeleniumTracker.Models.Autotest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CodelineId")
                        .HasColumnType("int");

                    b.Property<bool>("Failing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodelineId");

                    b.ToTable("Autotests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Class = "ullam1",
                            CodelineId = 1,
                            Failing = true,
                            Name = "iste1",
                            Package = "nihil1",
                            Priority = 2
                        },
                        new
                        {
                            Id = 2,
                            Class = "ut2",
                            CodelineId = 1,
                            Failing = false,
                            Name = "aut2",
                            Package = "maiores2",
                            Priority = 0
                        },
                        new
                        {
                            Id = 3,
                            Class = "laboriosam3",
                            CodelineId = 1,
                            Failing = false,
                            Name = "omnis3",
                            Package = "inventore3",
                            Priority = 1
                        },
                        new
                        {
                            Id = 4,
                            Class = "tempora4",
                            CodelineId = 1,
                            Failing = true,
                            Name = "iusto4",
                            Package = "et4",
                            Priority = 1
                        },
                        new
                        {
                            Id = 5,
                            Class = "et5",
                            CodelineId = 1,
                            Failing = true,
                            Name = "debitis5",
                            Package = "deserunt5",
                            Priority = 3
                        },
                        new
                        {
                            Id = 6,
                            Class = "qui6",
                            CodelineId = 1,
                            Failing = true,
                            Name = "iure6",
                            Package = "autem6",
                            Priority = 0
                        },
                        new
                        {
                            Id = 7,
                            Class = "ut7",
                            CodelineId = 1,
                            Failing = true,
                            Name = "ab7",
                            Package = "Omnis7",
                            Priority = 3
                        },
                        new
                        {
                            Id = 8,
                            Class = "perferendis8",
                            CodelineId = 1,
                            Failing = true,
                            Name = "aliquid8",
                            Package = "sunt8",
                            Priority = 3
                        },
                        new
                        {
                            Id = 9,
                            Class = "ut9",
                            CodelineId = 1,
                            Failing = false,
                            Name = "vel9",
                            Package = "occaecati.9",
                            Priority = 3
                        },
                        new
                        {
                            Id = 10,
                            Class = "Explicabo10",
                            CodelineId = 1,
                            Failing = true,
                            Name = "occaecati10",
                            Package = "vitae10",
                            Priority = 2
                        },
                        new
                        {
                            Id = 11,
                            Class = "reiciendis11",
                            CodelineId = 1,
                            Failing = true,
                            Name = "nemo.11",
                            Package = "unde11",
                            Priority = 2
                        },
                        new
                        {
                            Id = 12,
                            Class = "et12",
                            CodelineId = 1,
                            Failing = true,
                            Name = "quis12",
                            Package = "et12",
                            Priority = 2
                        },
                        new
                        {
                            Id = 13,
                            Class = "ex13",
                            CodelineId = 1,
                            Failing = true,
                            Name = "consectetur13",
                            Package = "molestiae13",
                            Priority = 2
                        },
                        new
                        {
                            Id = 14,
                            Class = "Inventore14",
                            CodelineId = 1,
                            Failing = true,
                            Name = "voluptatem14",
                            Package = "Quasi14",
                            Priority = 3
                        },
                        new
                        {
                            Id = 15,
                            Class = "non15",
                            CodelineId = 1,
                            Failing = true,
                            Name = "Voluptatem15",
                            Package = "quas15",
                            Priority = 2
                        });
                });

            modelBuilder.Entity("SeleniumTracker.Models.Codeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Codelines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "14.12"
                        });
                });

            modelBuilder.Entity("SeleniumTracker.Models.Failure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AutotestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2022, 6, 8, 19, 19, 5, 884, DateTimeKind.Local).AddTicks(8544));

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutotestId");

                    b.ToTable("Failures");
                });

            modelBuilder.Entity("SeleniumTracker.Models.Resolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateTime(2022, 6, 8, 19, 19, 5, 884, DateTimeKind.Local).AddTicks(9476));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FailureId")
                        .IsUnique();

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("SeleniumTracker.Models.TestLinkAnnotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AutotestId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneralWorkflow")
                        .HasColumnType("int");

                    b.Property<bool>("Ignore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SpecificWorkflow")
                        .HasColumnType("int");

                    b.Property<string>("TestlinkId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutotestId")
                        .IsUnique();

                    b.ToTable("TestLinkAnnotations");
                });

            modelBuilder.Entity("SeleniumTracker.Models.Autotest", b =>
                {
                    b.HasOne("SeleniumTracker.Models.Codeline", "Codeline")
                        .WithMany("Autotests")
                        .HasForeignKey("CodelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Codeline");
                });

            modelBuilder.Entity("SeleniumTracker.Models.Failure", b =>
                {
                    b.HasOne("SeleniumTracker.Models.Autotest", "Autotest")
                        .WithMany("Failures")
                        .HasForeignKey("AutotestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autotest");
                });

            modelBuilder.Entity("SeleniumTracker.Models.Resolution", b =>
                {
                    b.HasOne("SeleniumTracker.Models.Failure", null)
                        .WithOne("Resolution")
                        .HasForeignKey("SeleniumTracker.Models.Resolution", "FailureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeleniumTracker.Models.TestLinkAnnotation", b =>
                {
                    b.HasOne("SeleniumTracker.Models.Autotest", null)
                        .WithOne("TestLinkAnnotation")
                        .HasForeignKey("SeleniumTracker.Models.TestLinkAnnotation", "AutotestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeleniumTracker.Models.Autotest", b =>
                {
                    b.Navigation("Failures");

                    b.Navigation("TestLinkAnnotation")
                        .IsRequired();
                });

            modelBuilder.Entity("SeleniumTracker.Models.Codeline", b =>
                {
                    b.Navigation("Autotests");
                });

            modelBuilder.Entity("SeleniumTracker.Models.Failure", b =>
                {
                    b.Navigation("Resolution");
                });
#pragma warning restore 612, 618
        }
    }
}
